// Code generated by MockGen. DO NOT EDIT.
// Source: panic.go

// Package paniccode is a generated GoMock package.
package paniccode

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFoo is a mock of Foo interface.
type MockFoo struct {
	ctrl     *gomock.Controller
	recorder *MockFooMockRecorder
}

// MockFooMockRecorder is the mock recorder for MockFoo.
type MockFooMockRecorder struct {
	mock *MockFoo
}

// NewMockFoo creates a new mock instance.
func NewMockFoo(ctrl *gomock.Controller) *MockFoo {
	mock := &MockFoo{ctrl: ctrl}
	mock.recorder = &MockFooMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFoo) EXPECT() *MockFooMockRecorder {
	return m.recorder
}

// Bar mocks base method.
func (m *MockFoo) Bar() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bar")
	ret0, _ := ret[0].(string)
	return ret0
}

// Bar indicates an expected call of Bar.
func (mr *MockFooMockRecorder) Bar() *FooBarCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bar", reflect.TypeOf((*MockFoo)(nil).Bar))
	return &FooBarCall{Call: call}
}

//  FooBarCall wrap *gomock.Call
type FooBarCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FooBarCall) Return(arg0 string) *gomock.Call {
	return c.Call.Return(arg0)
}

// Baz mocks base method.
func (m *MockFoo) Baz() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Baz")
	ret0, _ := ret[0].(string)
	return ret0
}

// Baz indicates an expected call of Baz.
func (mr *MockFooMockRecorder) Baz() *FooBazCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Baz", reflect.TypeOf((*MockFoo)(nil).Baz))
	return &FooBazCall{Call: call}
}

//  FooBazCall wrap *gomock.Call
type FooBazCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FooBazCall) Return(arg0 string) *gomock.Call {
	return c.Call.Return(arg0)
}
