// Code generated by MockGen. DO NOT EDIT.
// Source: external.go

// Package source is a generated GoMock package.
package source

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	generics "github.com/golang/mock/mockgen/internal/tests/generics"
	other "github.com/golang/mock/mockgen/internal/tests/generics/other"
	constraints "golang.org/x/exp/constraints"
)

// MockExternalConstraint is a mock of ExternalConstraint interface.
type MockExternalConstraint[I constraints.Integer, F constraints.Float] struct {
	ctrl     *gomock.Controller
	recorder *MockExternalConstraintMockRecorder[I, F]
}

// MockExternalConstraintMockRecorder is the mock recorder for MockExternalConstraint.
type MockExternalConstraintMockRecorder[I constraints.Integer, F constraints.Float] struct {
	mock *MockExternalConstraint[I, F]
}

// NewMockExternalConstraint creates a new mock instance.
func NewMockExternalConstraint[I constraints.Integer, F constraints.Float](ctrl *gomock.Controller) *MockExternalConstraint[I, F] {
	mock := &MockExternalConstraint[I, F]{ctrl: ctrl}
	mock.recorder = &MockExternalConstraintMockRecorder[I, F]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExternalConstraint[I, F]) EXPECT() *MockExternalConstraintMockRecorder[I, F] {
	return m.recorder
}

// Eight mocks base method.
func (m *MockExternalConstraint[I, F]) Eight(arg0 F) other.Two[I, F] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Eight", arg0)
	ret0, _ := ret[0].(other.Two[I, F])
	return ret0
}

// Eight indicates an expected call of Eight.
func (mr *MockExternalConstraintMockRecorder[I, F]) Eight(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Eight", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Eight), arg0)
}

// Five mocks base method.
func (m *MockExternalConstraint[I, F]) Five(arg0 I) generics.Baz[F] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Five", arg0)
	ret0, _ := ret[0].(generics.Baz[F])
	return ret0
}

// Five indicates an expected call of Five.
func (mr *MockExternalConstraintMockRecorder[I, F]) Five(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Five", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Five), arg0)
}

// Four mocks base method.
func (m *MockExternalConstraint[I, F]) Four(arg0 I) generics.Foo[I, F] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Four", arg0)
	ret0, _ := ret[0].(generics.Foo[I, F])
	return ret0
}

// Four indicates an expected call of Four.
func (mr *MockExternalConstraintMockRecorder[I, F]) Four(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Four", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Four), arg0)
}

// Nine mocks base method.
func (m *MockExternalConstraint[I, F]) Nine(arg0 generics.Iface[I]) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Nine", arg0)
}

// Nine indicates an expected call of Nine.
func (mr *MockExternalConstraintMockRecorder[I, F]) Nine(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nine", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Nine), arg0)
}

// One mocks base method.
func (m *MockExternalConstraint[I, F]) One(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "One", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// One indicates an expected call of One.
func (mr *MockExternalConstraintMockRecorder[I, F]) One(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "One", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).One), arg0)
}

// Seven mocks base method.
func (m *MockExternalConstraint[I, F]) Seven(arg0 I) other.One[I] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seven", arg0)
	ret0, _ := ret[0].(other.One[I])
	return ret0
}

// Seven indicates an expected call of Seven.
func (mr *MockExternalConstraintMockRecorder[I, F]) Seven(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seven", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Seven), arg0)
}

// Six mocks base method.
func (m *MockExternalConstraint[I, F]) Six(arg0 I) *generics.Baz[F] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Six", arg0)
	ret0, _ := ret[0].(*generics.Baz[F])
	return ret0
}

// Six indicates an expected call of Six.
func (mr *MockExternalConstraintMockRecorder[I, F]) Six(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Six", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Six), arg0)
}

// Ten mocks base method.
func (m *MockExternalConstraint[I, F]) Ten(arg0 *I) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Ten", arg0)
}

// Ten indicates an expected call of Ten.
func (mr *MockExternalConstraintMockRecorder[I, F]) Ten(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ten", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Ten), arg0)
}

// Three mocks base method.
func (m *MockExternalConstraint[I, F]) Three(arg0 I) F {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Three", arg0)
	ret0, _ := ret[0].(F)
	return ret0
}

// Three indicates an expected call of Three.
func (mr *MockExternalConstraintMockRecorder[I, F]) Three(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Three", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Three), arg0)
}

// Two mocks base method.
func (m *MockExternalConstraint[I, F]) Two(arg0 I) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Two", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Two indicates an expected call of Two.
func (mr *MockExternalConstraintMockRecorder[I, F]) Two(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Two", reflect.TypeOf((*MockExternalConstraint[I, F])(nil).Two), arg0)
}

// MockEmbeddingIface is a mock of EmbeddingIface interface.
type MockEmbeddingIface[T constraints.Integer, R constraints.Float] struct {
	ctrl     *gomock.Controller
	recorder *MockEmbeddingIfaceMockRecorder[T, R]
}

// MockEmbeddingIfaceMockRecorder is the mock recorder for MockEmbeddingIface.
type MockEmbeddingIfaceMockRecorder[T constraints.Integer, R constraints.Float] struct {
	mock *MockEmbeddingIface[T, R]
}

// NewMockEmbeddingIface creates a new mock instance.
func NewMockEmbeddingIface[T constraints.Integer, R constraints.Float](ctrl *gomock.Controller) *MockEmbeddingIface[T, R] {
	mock := &MockEmbeddingIface[T, R]{ctrl: ctrl}
	mock.recorder = &MockEmbeddingIfaceMockRecorder[T, R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmbeddingIface[T, R]) EXPECT() *MockEmbeddingIfaceMockRecorder[T, R] {
	return m.recorder
}

// Foo mocks base method.
func (m *MockEmbeddingIface[T, R]) Foo() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo")
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MockEmbeddingIfaceMockRecorder[T, R]) Foo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockEmbeddingIface[T, R])(nil).Foo))
}

// Twenty mocks base method.
func (m *MockEmbeddingIface[T, R]) Twenty() (R, T) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Twenty")
	ret0, _ := ret[0].(R)
	ret1, _ := ret[1].(T)
	return ret0, ret1
}

// Twenty indicates an expected call of Twenty.
func (mr *MockEmbeddingIfaceMockRecorder[T, R]) Twenty() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Twenty", reflect.TypeOf((*MockEmbeddingIface[T, R])(nil).Twenty))
}

// TwentyFour mocks base method.
func (m *MockEmbeddingIface[T, R]) TwentyFour() other.StructType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwentyFour")
	ret0, _ := ret[0].(other.StructType)
	return ret0
}

// TwentyFour indicates an expected call of TwentyFour.
func (mr *MockEmbeddingIfaceMockRecorder[T, R]) TwentyFour() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwentyFour", reflect.TypeOf((*MockEmbeddingIface[T, R])(nil).TwentyFour))
}

// TwentyThree mocks base method.
func (m *MockEmbeddingIface[T, R]) TwentyThree() other.StructType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwentyThree")
	ret0, _ := ret[0].(other.StructType)
	return ret0
}

// TwentyThree indicates an expected call of TwentyThree.
func (mr *MockEmbeddingIfaceMockRecorder[T, R]) TwentyThree() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwentyThree", reflect.TypeOf((*MockEmbeddingIface[T, R])(nil).TwentyThree))
}

// TwentyTwo mocks base method.
func (m *MockEmbeddingIface[T, R]) TwentyTwo() generics.StructType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwentyTwo")
	ret0, _ := ret[0].(generics.StructType)
	return ret0
}

// TwentyTwo indicates an expected call of TwentyTwo.
func (mr *MockEmbeddingIfaceMockRecorder[T, R]) TwentyTwo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwentyTwo", reflect.TypeOf((*MockEmbeddingIface[T, R])(nil).TwentyTwo))
}

// MockTwentyOne is a mock of TwentyOne interface.
type MockTwentyOne[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockTwentyOneMockRecorder[T]
}

// MockTwentyOneMockRecorder is the mock recorder for MockTwentyOne.
type MockTwentyOneMockRecorder[T any] struct {
	mock *MockTwentyOne[T]
}

// NewMockTwentyOne creates a new mock instance.
func NewMockTwentyOne[T any](ctrl *gomock.Controller) *MockTwentyOne[T] {
	mock := &MockTwentyOne[T]{ctrl: ctrl}
	mock.recorder = &MockTwentyOneMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwentyOne[T]) EXPECT() *MockTwentyOneMockRecorder[T] {
	return m.recorder
}

// TwentyOne mocks base method.
func (m *MockTwentyOne[T]) TwentyOne() T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwentyOne")
	ret0, _ := ret[0].(T)
	return ret0
}

// TwentyOne indicates an expected call of TwentyOne.
func (mr *MockTwentyOneMockRecorder[T]) TwentyOne() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwentyOne", reflect.TypeOf((*MockTwentyOne[T])(nil).TwentyOne))
}

// MockTwentyFour is a mock of TwentyFour interface.
type MockTwentyFour[T other.StructType] struct {
	ctrl     *gomock.Controller
	recorder *MockTwentyFourMockRecorder[T]
}

// MockTwentyFourMockRecorder is the mock recorder for MockTwentyFour.
type MockTwentyFourMockRecorder[T other.StructType] struct {
	mock *MockTwentyFour[T]
}

// NewMockTwentyFour creates a new mock instance.
func NewMockTwentyFour[T other.StructType](ctrl *gomock.Controller) *MockTwentyFour[T] {
	mock := &MockTwentyFour[T]{ctrl: ctrl}
	mock.recorder = &MockTwentyFourMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTwentyFour[T]) EXPECT() *MockTwentyFourMockRecorder[T] {
	return m.recorder
}

// TwentyFour mocks base method.
func (m *MockTwentyFour[T]) TwentyFour() T {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TwentyFour")
	ret0, _ := ret[0].(T)
	return ret0
}

// TwentyFour indicates an expected call of TwentyFour.
func (mr *MockTwentyFourMockRecorder[T]) TwentyFour() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TwentyFour", reflect.TypeOf((*MockTwentyFour[T])(nil).TwentyFour))
}
